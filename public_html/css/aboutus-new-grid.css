/*
    With this selector, we are specifying that all objects use
    the border-box model (not the content-box model)
*/
*, *:after, *:before {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}


/*
    Here we are using a 'fancy' css selector that is 
    specifying if the class of an item starts with
    'grid-col-', then we should apply the styling listed
*/
[class^='grid-col-'] {
    float: left;
    padding: 0; 
    text-align: center; /* center the content in this block */
}


.grid-col-8of10 {
    width: 80%;
    
}



.grid-col-25of100 {
    width: 25%;
}

.grid-col-10of10 {
    width: 100%;
}

.grid-col-3of10 {
    width: 25%;    
}


.grid-col-84of100 {
    width: 84%;
}

.grid-col-6of10{
    width:60%;
}

.grid-col-4of10{
    width:40%;
}

.grid-col-5of10{
    width: 50%;

}


.grid-col-2of10{
    width: 20%;
   
}
/*
    Here using @media queries, we are specifying when the display
    has a width less than 50em it should collapse the 5/10 columns 
    into one stack (hence width: 100%)
*/


@media (max-width: 50em) {

    .grid-col-8of100 {
        width: 100%;
    }
}

@media (max-width: 50em) {

    .grid-col-25of100 {
        width: 100%;
    }
}


@media (max-width: 50em) {

    .grid-col-10of10 {
        width: 100%;
    }
}

@media (max-width: 80em) {

    .grid-col-3of10 {
        width: 100%;
    }
}

@media (max-width: 80em) {

	.grid-col-84of100{
		width: 100%;  
	}
}

@media (max-width: 80em) {

	.grid-col-10of10{
		height: 400%;
	}
}


@media (max-width:50em) {

	.grid-col-10of10{
		width: 100%;
	}
}


/*
    Much like last week, we are clearing the floating items so
    that our 'grid' structure can be stacked on others
*/
.grid:after {
    content: "";
    display: block;
    clear: both;
}